name: CI/CD

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [master]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  PathsFilter:
    runs-on: ubuntu-latest
    outputs:
      RubbergodService: ${{ steps.filter.outputs.RubbergodService }}
      Graphics: ${{ steps.filter.outputs.Graphics }}
      PointsService: ${{ steps.filter.outputs.PointsService }}
      ImageProcessingService: ${{ steps.filter.outputs.ImageProcessingService }}
      AuditLogService: ${{ steps.filter.outputs.AuditLogService }}
      UserMeasuresService: ${{ steps.filter.outputs.UserMeasuresService }}
      EmoteService: ${{ steps.filter.outputs.EmoteService }}
      RemindService: ${{ steps.filter.outputs.RemindService }}
      SearchingService: ${{ steps.filter.outputs.SearchingService }}
      InviteService: ${{ steps.filter.outputs.InviteService }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Paths filter
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            RubbergodService:
              - 'src/RubbergodService/**'
              - 'src/RubbergodService.Dockerfile'
            Graphics:
              - 'src/Graphics/**'
            PointsService:
              - 'src/PointsService/**'
              - 'src/PointsService.Dockerfile'
            ImageProcessingService:
              - 'src/ImageProcessingService/**'
              - 'src/ImageProcessingService.Dockerfile'
            AuditLogService:
              - 'src/AuditLogService/**'
              - 'src/AuditLogService.Dockerfile'
            UserMeasuresService:
              - 'src/UserMeasuresService/**'
              - 'src/UserMeasuresService.Dockerfile'
            EmoteService:
              - 'src/EmoteService/**'
              - 'src/EmoteService.Dockerfile'
            RemindService:
              - 'src/RemindService/**'
              - 'src/RemindService.Dockerfile'
            SearchingService:
              - 'src/SearchingService/**'
              - 'src/SearchingService.Dockerfile'
            InviteService:
              - 'src/InviteService/**'
              - 'src/InviteService.Dockerfile'
  CheckStaticContent:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Markdown check
        uses: nosborn/github-action-markdown-cli@v3.3.0
        with:
          files: .
      - name: JSON file check
        env:
          EXCLUDE_FILES: src/Graphics/tsconfig.json
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/json-lint/master/pipeline.sh)
  BuildCommonLibraries:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Restore dependencies
        run: dotnet restore -r linux-x64 src/GrillBot.Services.Common/
      - name: Build (RELEASE)
        run: dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/GrillBot.Services.Common
  BuildServices:
    runs-on: ubuntu-latest
    needs: [CheckStaticContent, PathsFilter, BuildCommonLibraries]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          source-url: https://nuget.pkg.github.com/GrillBot/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Setup Node.JS
        uses: actions/setup-node@v4
        if: needs.PathsFilter.outputs.Graphics == 'true'
        with:
          node-version: 18.x
      - name: RubbergodService
        if: needs.PathsFilter.outputs.RubbergodService == 'true'
        run: |
          dotnet restore -r linux-x64 src/RubbergodService/
          dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/RubbergodService/
      - name: Graphics
        if: needs.PathsFilter.outputs.Graphics == 'true'
        working-directory: src/Graphics/
        run: |
          npm ci
          npm run build
      - name: PointsService
        if: needs.PathsFilter.outputs.PointsService == 'true'
        run: |
          dotnet restore -r linux-x64 src/PointsService/
          dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/PointsService/
      - name: ImageProcessingService
        if: needs.PathsFilter.outputs.ImageProcessingService == 'true'
        run: |
          dotnet restore -r linux-x64 src/ImageProcessingService/
          dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/ImageProcessingService/
      - name: AuditLogService
        if: needs.PathsFilter.outputs.AuditLogService == 'true'
        run: |
          dotnet restore -r linux-x64 src/AuditLogService/
          dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/AuditLogService/
      - name: UserMeasuresService
        if: needs.PathsFilter.outputs.UserMeasuresService == 'true'
        run: |
          dotnet restore -r linux-x64 src/UserMeasuresService/
          dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/UserMeasuresService/
      - name: EmoteService
        if: needs.PathsFilter.outputs.EmoteService == 'true'
        run: |
          dotnet restore -r linux-x64 src/EmoteService/
          dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/EmoteService/
      - name: RemindService
        if: needs.PathsFilter.outputs.RemindService == 'true'
        run: |
          dotnet restore -r linux-x64 src/RemindService/
          dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/RemindService/
      - name: SearchingService
        if: needs.PathsFilter.outputs.SearchingService == 'true'
        run: |
          dotnet restore -r linux-x64 src/SearchingService/
          dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/SearchingService/
      - name: InviteService
        if: needs.PathsFilter.outputs.InviteService == 'true'
        run: |
          dotnet restore -r linux-x64 src/InviteService/
          dotnet build -c Release -r linux-x64 --no-self-contained --no-restore src/InviteService/
  CreateDockerImages:
    runs-on: ubuntu-latest
    needs: [PathsFilter, BuildServices]
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Login to the container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: RubbergodService
        if: needs.PathsFilter.outputs.RubbergodService == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/
          file: src/RubbergodService.Dockerfile
          push: true
          tags: ghcr.io/grillbot/grillbot.services:rubbergod_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
      - name: Graphics
        if: needs.PathsFilter.outputs.Graphics == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/Graphics
          push: true
          tags: ghcr.io/grillbot/grillbot.services:graphics
      - name: PointsService
        if: needs.PathsFilter.outputs.PointsService == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/
          file: src/PointsService.Dockerfile
          push: true
          tags: ghcr.io/grillbot/grillbot.services:points_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
      - name: ImageProcessingService
        if: needs.PathsFilter.outputs.ImageProcessingService == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/
          file: src/ImageProcessingService.Dockerfile
          push: true
          tags: ghcr.io/grillbot/grillbot.services:image_processing_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
      - name: AuditLogService
        if: needs.PathsFilter.outputs.AuditLogService == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/
          file: src/AuditLogService.Dockerfile
          push: true
          tags: ghcr.io/grillbot/grillbot.services:audit_log_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
      - name: UserMeasuresService
        if: needs.PathsFilter.outputs.UserMeasuresService == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/
          file: src/UserMeasuresService.Dockerfile
          push: true
          tags: ghcr.io/grillbot/grillbot.services:user_measures_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
      - name: EmoteService
        if: needs.PathsFilter.outputs.EmoteService == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/
          file: src/EmoteService.Dockerfile
          push: true
          tags: ghcr.io/grillbot/grillbot.services:emote_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
      - name: RemindService
        if: needs.PathsFilter.outputs.RemindService == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/
          file: src/RemindService.Dockerfile
          push: true
          tags: ghcr.io/grillbot/grillbot.services:remind_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
      - name: SearchingService
        if: needs.PathsFilter.outputs.SearchingService == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/
          file: src/SearchingService.Dockerfile
          push: true
          tags: ghcr.io/grillbot/grillbot.services:searching_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
      - name: InviteService
        if: needs.PathsFilter.outputs.InviteService == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/
          file: src/InviteService.Dockerfile
          push: true
          tags: ghcr.io/grillbot/grillbot.services:invite_service
          build-args: |
            github_actions_token=${{ secrets.GITHUB_TOKEN }}
  RubbergodService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_RubbergodService"
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.RubbergodService == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh rubbergod_service
  Graphics_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_Graphics"
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.Graphics == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh graphics
  PointsService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_PointsService"
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.PointsService == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh points
  ImageProcessingService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_ImageProcessingService"
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.ImageProcessingService == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh image_processing
  AuditLogService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_AuditLogService"
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.AuditLogService == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh auditlog
  UserMeasuresService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_UserMeasuresService"
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.UserMeasuresService == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh user_measures
  EmoteService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_EmoteService"
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.EmoteService == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh emote
  RemindService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_RemindService"
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.RemindService == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh remind
  SearchingService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: "Production_SearchingService"
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.SearchingService == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh searching
  InviteService_Deploy_Production:
    runs-on: ubuntu-latest
    environment: Production_InviteService
    needs: [PathsFilter, CreateDockerImages]
    if: github.ref == 'refs/heads/master' && needs.PathsFilter.outputs.InviteService == 'true'
    steps:
      - name: Execute deployment on SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_Username }}
          password: ${{ secrets.SSH_Password }}
          port: 22
          script: echo '${{ secrets.SSH_Password }}' | sudo -S /scripts/update-grillbot-prod.sh invite
  VerifyProductionDeployment:
    runs-on: ubuntu-latest
    environment: ProductionInternal
    needs:
      [
        PathsFilter,
        RubbergodService_Deploy_Production,
        Graphics_Deploy_Production,
        PointsService_Deploy_Production,
        ImageProcessingService_Deploy_Production,
        AuditLogService_Deploy_Production,
        UserMeasuresService_Deploy_Production,
        EmoteService_Deploy_Production,
        RemindService_Deploy_Production,
        SearchingService_Deploy_Production,
        InviteService_Deploy_Production
      ]
    if: ${{ github.ref == 'refs/heads/master' && always() && !failure() && !cancelled() }}
    steps:
      - name: RubergodService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.RubbergodService == 'true' && needs.RubbergodService_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/rubbergodService
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
      - name: GraphicsService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.Graphics == 'true' && needs.Graphics_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/graphics
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
      - name: PointsService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.PointsService == 'true' && needs.PointsService_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/points
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
      - name: ImageProcessingService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.ImageProcessingService == 'true' && needs.ImageProcessingService_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/imageProcessing
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
      - name: AuditLogService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.AuditLogService == 'true' && needs.AuditLogService_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/auditLog
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
      - name: UserMeasuresService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.UserMeasuresService == 'true' && needs.UserMeasuresService_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/userMeasures
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
      - name: EmoteService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.EmoteService == 'true' && needs.EmoteService_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/emote
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
      - name: RemindService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.RemindService == 'true' && needs.RemindService_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/remind
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
      - name: SearchingService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.SearchingService == 'true' && needs.SearchingService_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/searching
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
      - name: InviteService
        uses: jtalk/url-health-check-action@v4
        if: needs.PathsFilter.outputs.InviteService == 'true' && needs.InviteService_Deploy_Production.result == 'success'
        with:
          url: https://health.grillbot.eu/invite
          follow-redirect: true
          max-attempts: 10
          retry-delay: 5s
