// <auto-generated />
using System;
using AuditLogService.Core.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuditLogService.Core.Migrations
{
    [DbContext(typeof(AuditLogServiceContext))]
    [Migration("20250922185045_DbOpts_20250922")]
    partial class DbOpts_20250922
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuditLogService.Core.Entity.ApiRequest", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ApiGroupName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ForwardedIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Headers")
                        .HasColumnType("jsonb");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Parameters")
                        .HasColumnType("jsonb");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("RequestDate")
                        .HasColumnType("date");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Role")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TemplatePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LogItemId");

                    b.HasIndex("Role")
                        .HasFilter("\"Role\" IS NOT NULL");

                    b.HasIndex("ApiGroupName", "EndAt");

                    b.HasIndex("ApiGroupName", "RequestDate");

                    b.HasIndex("Method", "TemplatePath", "ApiGroupName", "Identification");

                    b.ToTable("ApiRequests");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ChannelCreated", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("ChannelInfoId");

                    b.ToTable("ChannelCreatedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ChannelDeleted", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("ChannelInfoId");

                    b.ToTable("ChannelDeletedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ChannelInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("Bitrate")
                        .HasColumnType("integer");

                    b.Property<string>("ChannelName")
                        .HasColumnType("text");

                    b.Property<int?>("ChannelType")
                        .HasColumnType("integer");

                    b.Property<int>("Flags")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsNsfw")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int?>("SlowMode")
                        .HasColumnType("integer");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChannelInfoItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ChannelUpdated", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AfterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeforeId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("AfterId");

                    b.HasIndex("BeforeId");

                    b.ToTable("ChannelUpdatedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.DeletedEmote", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmoteId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("EmoteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LogItemId");

                    b.ToTable("DeletedEmotes");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.EmbedField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmbedInfoId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inline")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("EmbedInfoId");

                    b.ToTable("EmbedFields");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.EmbedInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .HasColumnType("text");

                    b.Property<bool>("ContainsFooter")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageInfo")
                        .HasColumnType("text");

                    b.Property<Guid>("MessageDeletedId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailInfo")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("VideoInfo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageDeletedId");

                    b.ToTable("EmbedInfoItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.File", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Extension")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LogItemId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.GuildInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AfkChannelId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("AfkTimeout")
                        .HasColumnType("integer");

                    b.Property<string>("BannerId")
                        .HasColumnType("text");

                    b.Property<int>("DefaultMessageNotifications")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DiscoverySplashId")
                        .HasColumnType("text");

                    b.Property<int>("ExplicitContentFilter")
                        .HasColumnType("integer");

                    b.Property<long>("Features")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("IconData")
                        .HasColumnType("bytea");

                    b.Property<string>("IconId")
                        .HasColumnType("text");

                    b.Property<int>("MfaLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NsfwLevel")
                        .HasColumnType("integer");

                    b.Property<int>("PremiumTier")
                        .HasColumnType("integer");

                    b.Property<string>("PublicUpdatesChannelId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("RulesChannelId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SplashId")
                        .HasColumnType("text");

                    b.Property<int>("SystemChannelFlags")
                        .HasColumnType("integer");

                    b.Property<string>("SystemChannelId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("VanityUrl")
                        .HasColumnType("text");

                    b.Property<int>("VerificationLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GuildInfoItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.GuildUpdated", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AfterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeforeId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("AfterId");

                    b.HasIndex("BeforeId");

                    b.ToTable("GuildUpdatedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.InteractionCommand", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CommandError")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorReason")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<bool>("HasResponded")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("InteractionDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValidToken")
                        .HasColumnType("boolean");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Parameters")
                        .HasColumnType("jsonb");

                    b.HasKey("LogItemId");

                    b.HasIndex("InteractionDate");

                    b.ToTable("InteractionCommands");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.JobExecution", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("JobDate")
                        .HasColumnType("date");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StartUserId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("WasError")
                        .HasColumnType("boolean");

                    b.HasKey("LogItemId");

                    b.HasIndex("EndAt");

                    b.HasIndex("JobDate");

                    b.HasIndex("JobName");

                    b.ToTable("JobExecutions");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.LogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscordId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("GuildId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("LogDate")
                        .HasColumnType("date");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("GuildId");

                    b.HasIndex("CreatedAt", "IsDeleted");

                    b.ToTable("LogItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.LogMessage", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("SourceAppName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("LogItemId");

                    b.ToTable("LogMessages");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MemberInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("Flags")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeaf")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMuted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool?>("PointsDeactivated")
                        .HasColumnType("boolean");

                    b.Property<string>("SelfUnverifyMinimalTime")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("MemberInfos");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MemberRoleUpdated", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAdded")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleColor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("LogItemId");

                    b.ToTable("MemberRoleUpdatedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MemberUpdated", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AfterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeforeId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("AfterId");

                    b.HasIndex("BeforeId");

                    b.ToTable("MemberUpdatedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MessageDeleted", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("MessageCreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogItemId");

                    b.ToTable("MessageDeletedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MessageEdited", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentAfter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentBefore")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JumpUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LogItemId");

                    b.ToTable("MessageEditedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.OverwriteCreated", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OverwriteInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("OverwriteInfoId");

                    b.ToTable("OverwriteCreatedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.OverwriteDeleted", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OverwriteInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("OverwriteInfoId");

                    b.ToTable("OverwriteDeletedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.OverwriteInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AllowValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DenyValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("OverwriteInfoItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.OverwriteUpdated", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AfterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeforeId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("AfterId");

                    b.HasIndex("BeforeId");

                    b.ToTable("OverwriteUpdatedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.RoleDeleted", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("RoleInfoId");

                    b.ToTable("RoleDeleted");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.RoleInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("IconId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsHoisted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMentionable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Permissions")
                        .HasColumnType("jsonb");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("RoleInfos");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ThreadDeleted", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreadInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("ThreadInfoId");

                    b.ToTable("ThreadDeletedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ThreadInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ArchiveDuration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<int?>("SlowMode")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasColumnType("jsonb");

                    b.Property<string>("ThreadName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ThreadInfoItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ThreadUpdated", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AfterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeforeId")
                        .HasColumnType("uuid");

                    b.HasKey("LogItemId");

                    b.HasIndex("AfterId");

                    b.HasIndex("BeforeId");

                    b.ToTable("ThreadUpdatedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.Unban", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("LogItemId");

                    b.ToTable("Unbans");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.UserJoined", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("MemberCount")
                        .HasColumnType("integer");

                    b.HasKey("LogItemId");

                    b.ToTable("UserJoinedItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.UserLeft", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("BanReason")
                        .HasColumnType("text");

                    b.Property<bool>("IsBan")
                        .HasColumnType("boolean");

                    b.Property<int>("MemberCount")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("LogItemId");

                    b.ToTable("UserLeftItems");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ApiRequest", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("ApiRequest")
                        .HasForeignKey("AuditLogService.Core.Entity.ApiRequest", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ChannelCreated", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.ChannelInfo", "ChannelInfo")
                        .WithMany()
                        .HasForeignKey("ChannelInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("ChannelCreated")
                        .HasForeignKey("AuditLogService.Core.Entity.ChannelCreated", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelInfo");

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ChannelDeleted", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.ChannelInfo", "ChannelInfo")
                        .WithMany()
                        .HasForeignKey("ChannelInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("ChannelDeleted")
                        .HasForeignKey("AuditLogService.Core.Entity.ChannelDeleted", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelInfo");

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ChannelUpdated", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.ChannelInfo", "After")
                        .WithMany()
                        .HasForeignKey("AfterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.ChannelInfo", "Before")
                        .WithMany()
                        .HasForeignKey("BeforeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("ChannelUpdated")
                        .HasForeignKey("AuditLogService.Core.Entity.ChannelUpdated", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("After");

                    b.Navigation("Before");

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.DeletedEmote", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("DeletedEmote")
                        .HasForeignKey("AuditLogService.Core.Entity.DeletedEmote", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.EmbedField", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.EmbedInfo", "EmbedInfo")
                        .WithMany("Fields")
                        .HasForeignKey("EmbedInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmbedInfo");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.EmbedInfo", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.MessageDeleted", "MessageDeleted")
                        .WithMany("Embeds")
                        .HasForeignKey("MessageDeletedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageDeleted");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.File", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithMany("Files")
                        .HasForeignKey("LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.GuildUpdated", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.GuildInfo", "After")
                        .WithMany()
                        .HasForeignKey("AfterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.GuildInfo", "Before")
                        .WithMany()
                        .HasForeignKey("BeforeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("GuildUpdated")
                        .HasForeignKey("AuditLogService.Core.Entity.GuildUpdated", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("After");

                    b.Navigation("Before");

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.InteractionCommand", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("InteractionCommand")
                        .HasForeignKey("AuditLogService.Core.Entity.InteractionCommand", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.JobExecution", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("Job")
                        .HasForeignKey("AuditLogService.Core.Entity.JobExecution", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.LogMessage", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("LogMessage")
                        .HasForeignKey("AuditLogService.Core.Entity.LogMessage", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MemberRoleUpdated", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithMany("MemberRolesUpdated")
                        .HasForeignKey("LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MemberUpdated", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.MemberInfo", "After")
                        .WithMany()
                        .HasForeignKey("AfterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.MemberInfo", "Before")
                        .WithMany()
                        .HasForeignKey("BeforeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("MemberUpdated")
                        .HasForeignKey("AuditLogService.Core.Entity.MemberUpdated", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("After");

                    b.Navigation("Before");

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MessageDeleted", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("MessageDeleted")
                        .HasForeignKey("AuditLogService.Core.Entity.MessageDeleted", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MessageEdited", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("MessageEdited")
                        .HasForeignKey("AuditLogService.Core.Entity.MessageEdited", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.OverwriteCreated", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("OverwriteCreated")
                        .HasForeignKey("AuditLogService.Core.Entity.OverwriteCreated", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.OverwriteInfo", "OverwriteInfo")
                        .WithMany()
                        .HasForeignKey("OverwriteInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");

                    b.Navigation("OverwriteInfo");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.OverwriteDeleted", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("OverwriteDeleted")
                        .HasForeignKey("AuditLogService.Core.Entity.OverwriteDeleted", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.OverwriteInfo", "OverwriteInfo")
                        .WithMany()
                        .HasForeignKey("OverwriteInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");

                    b.Navigation("OverwriteInfo");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.OverwriteUpdated", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.OverwriteInfo", "After")
                        .WithMany()
                        .HasForeignKey("AfterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.OverwriteInfo", "Before")
                        .WithMany()
                        .HasForeignKey("BeforeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("OverwriteUpdated")
                        .HasForeignKey("AuditLogService.Core.Entity.OverwriteUpdated", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("After");

                    b.Navigation("Before");

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.RoleDeleted", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("RoleDeleted")
                        .HasForeignKey("AuditLogService.Core.Entity.RoleDeleted", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.RoleInfo", "RoleInfo")
                        .WithMany()
                        .HasForeignKey("RoleInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");

                    b.Navigation("RoleInfo");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ThreadDeleted", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("ThreadDeleted")
                        .HasForeignKey("AuditLogService.Core.Entity.ThreadDeleted", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.ThreadInfo", "ThreadInfo")
                        .WithMany()
                        .HasForeignKey("ThreadInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");

                    b.Navigation("ThreadInfo");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.ThreadUpdated", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.ThreadInfo", "After")
                        .WithMany()
                        .HasForeignKey("AfterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.ThreadInfo", "Before")
                        .WithMany()
                        .HasForeignKey("BeforeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("ThreadUpdated")
                        .HasForeignKey("AuditLogService.Core.Entity.ThreadUpdated", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("After");

                    b.Navigation("Before");

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.Unban", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("Unban")
                        .HasForeignKey("AuditLogService.Core.Entity.Unban", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.UserJoined", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("UserJoined")
                        .HasForeignKey("AuditLogService.Core.Entity.UserJoined", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.UserLeft", b =>
                {
                    b.HasOne("AuditLogService.Core.Entity.LogItem", "LogItem")
                        .WithOne("UserLeft")
                        .HasForeignKey("AuditLogService.Core.Entity.UserLeft", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.EmbedInfo", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.LogItem", b =>
                {
                    b.Navigation("ApiRequest");

                    b.Navigation("ChannelCreated");

                    b.Navigation("ChannelDeleted");

                    b.Navigation("ChannelUpdated");

                    b.Navigation("DeletedEmote");

                    b.Navigation("Files");

                    b.Navigation("GuildUpdated");

                    b.Navigation("InteractionCommand");

                    b.Navigation("Job");

                    b.Navigation("LogMessage");

                    b.Navigation("MemberRolesUpdated");

                    b.Navigation("MemberUpdated");

                    b.Navigation("MessageDeleted");

                    b.Navigation("MessageEdited");

                    b.Navigation("OverwriteCreated");

                    b.Navigation("OverwriteDeleted");

                    b.Navigation("OverwriteUpdated");

                    b.Navigation("RoleDeleted");

                    b.Navigation("ThreadDeleted");

                    b.Navigation("ThreadUpdated");

                    b.Navigation("Unban");

                    b.Navigation("UserJoined");

                    b.Navigation("UserLeft");
                });

            modelBuilder.Entity("AuditLogService.Core.Entity.MessageDeleted", b =>
                {
                    b.Navigation("Embeds");
                });
#pragma warning restore 612, 618
        }
    }
}
