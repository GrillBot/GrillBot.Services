// <auto-generated />
using System;
using EmoteService.Core.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmoteService.Core.Migrations
{
    [DbContext(typeof(EmoteServiceContext))]
    [Migration("20250508132306_EmoteSuggestions_VoteClose")]
    partial class EmoteSuggestions_VoteClose
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmoteService.Core.Entity.EmoteDefinition", b =>
                {
                    b.Property<string>("EmoteId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("EmoteName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EmoteIsAnimated")
                        .HasColumnType("boolean");

                    b.Property<string>("GuildId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("EmoteId", "EmoteName", "EmoteIsAnimated", "GuildId");

                    b.ToTable("EmoteDefinitions");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.EmoteUserStatItem", b =>
                {
                    b.Property<string>("EmoteId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("EmoteName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EmoteIsAnimated")
                        .HasColumnType("boolean");

                    b.Property<string>("GuildId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("FirstOccurence")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastOccurence")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UseCount")
                        .HasColumnType("integer");

                    b.HasKey("EmoteId", "EmoteName", "EmoteIsAnimated", "GuildId", "UserId");

                    b.ToTable("EmoteUserStatItems");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.Guild", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SuggestionChannelId")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VoteChannelId")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan>("VoteTime")
                        .HasColumnType("interval");

                    b.HasKey("GuildId");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.Suggestions.EmoteSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ApprovalByUserId")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ApprovalSetAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ApprovedForVote")
                        .HasColumnType("boolean");

                    b.Property<decimal>("FromUserId")
                        .HasColumnType("numeric");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsAnimated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReasonForAdd")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime>("SuggestedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SuggestionMessageId")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("EmoteSuggestions", "suggestions");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.Suggestions.EmoteUserVote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric");

                    b.Property<Guid>("VoteSessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoteSessionId");

                    b.ToTable("EmoteUserVotes", "suggestions");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.Suggestions.EmoteVoteSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpectedVoteEndAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("KilledAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("VoteMessageId")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("VoteStartedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EmoteVoteSessions", "suggestions");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.Suggestions.EmoteUserVote", b =>
                {
                    b.HasOne("EmoteService.Core.Entity.Suggestions.EmoteVoteSession", "VoteSession")
                        .WithMany("UserVotes")
                        .HasForeignKey("VoteSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoteSession");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.Suggestions.EmoteVoteSession", b =>
                {
                    b.HasOne("EmoteService.Core.Entity.Suggestions.EmoteSuggestion", "Suggestion")
                        .WithOne("VoteSession")
                        .HasForeignKey("EmoteService.Core.Entity.Suggestions.EmoteVoteSession", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.Suggestions.EmoteSuggestion", b =>
                {
                    b.Navigation("VoteSession");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.Suggestions.EmoteVoteSession", b =>
                {
                    b.Navigation("UserVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
