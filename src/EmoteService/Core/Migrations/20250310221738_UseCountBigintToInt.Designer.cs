// <auto-generated />
using System;
using EmoteService.Core.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmoteService.Core.Migrations
{
    [DbContext(typeof(EmoteServiceContext))]
    [Migration("20250310221738_UseCountBigintToInt")]
    partial class UseCountBigintToInt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmoteService.Core.Entity.EmoteDefinition", b =>
                {
                    b.Property<string>("EmoteId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("EmoteName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EmoteIsAnimated")
                        .HasColumnType("boolean");

                    b.Property<string>("GuildId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("EmoteId", "EmoteName", "EmoteIsAnimated", "GuildId");

                    b.ToTable("EmoteDefinitions");
                });

            modelBuilder.Entity("EmoteService.Core.Entity.EmoteUserStatItem", b =>
                {
                    b.Property<string>("EmoteId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("EmoteName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EmoteIsAnimated")
                        .HasColumnType("boolean");

                    b.Property<string>("GuildId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("FirstOccurence")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastOccurence")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UseCount")
                        .HasColumnType("integer");

                    b.HasKey("EmoteId", "EmoteName", "EmoteIsAnimated", "GuildId", "UserId");

                    b.ToTable("EmoteUserStatItems");
                });
#pragma warning restore 612, 618
        }
    }
}
