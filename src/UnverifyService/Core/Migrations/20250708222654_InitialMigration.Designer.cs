// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UnverifyService.Core.Entity;

#nullable disable

namespace UnverifyService.Core.Migrations
{
    [DbContext(typeof(UnverifyContext))]
    [Migration("20250708222654_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UnverifyService.Core.Entity.ActiveUnverify", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LogSetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LogSetId")
                        .IsUnique();

                    b.ToTable("ActiveUnverifies");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Guild", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MuteRoleId")
                        .HasColumnType("numeric");

                    b.HasKey("GuildId");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("FromUserId")
                        .HasColumnType("numeric");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<decimal>("ToUserId")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("LogItems", "logs");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveChannel", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AllowValue")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("DenyValue")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("LogItemId", "ChannelId");

                    b.ToTable("UnverifyLogRemoveChannel", "logs");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveOperation", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Force")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFromWeb")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasMaxLength(85)
                        .HasColumnType("character varying(85)");

                    b.HasKey("LogItemId");

                    b.ToTable("UnverifyLogRemoveOperation", "logs");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveRole", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric");

                    b.HasKey("LogItemId", "RoleId");

                    b.ToTable("UnverifyLogRemoveRole", "logs");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogSetChannel", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AllowValue")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("DenyValue")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("LogItemId", "ChannelId");

                    b.ToTable("UnverifyLogSetChannel", "logs");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogSetOperation", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("KeepMutedRole")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("character varying(85)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogItemId");

                    b.ToTable("UnverifyLogSetOperation", "logs");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogSetRole", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsKept")
                        .HasColumnType("boolean");

                    b.HasKey("LogItemId", "RoleId");

                    b.ToTable("UnverifyLogSetRole", "logs");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogUpdateOperation", b =>
                {
                    b.Property<Guid>("LogItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NewEndAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NewStartAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("LogItemId");

                    b.ToTable("UnverifyLogUpdateOperation", "logs");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.SelfUnverifyKeepable", b =>
                {
                    b.Property<string>("Group")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Group", "Name");

                    b.ToTable("SelfUnverifyKeepables");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.User", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBotAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("SelfUnverifyMinimalTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.ActiveUnverify", b =>
                {
                    b.HasOne("UnverifyService.Core.Entity.Logs.UnverifyLogItem", "LogItem")
                        .WithOne()
                        .HasForeignKey("UnverifyService.Core.Entity.ActiveUnverify", "LogSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveChannel", b =>
                {
                    b.HasOne("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveOperation", "Operation")
                        .WithMany("Channels")
                        .HasForeignKey("LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveOperation", b =>
                {
                    b.HasOne("UnverifyService.Core.Entity.Logs.UnverifyLogItem", "LogItem")
                        .WithOne("RemoveOperation")
                        .HasForeignKey("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveOperation", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveRole", b =>
                {
                    b.HasOne("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveOperation", "Operation")
                        .WithMany("Roles")
                        .HasForeignKey("LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogSetChannel", b =>
                {
                    b.HasOne("UnverifyService.Core.Entity.Logs.UnverifyLogSetOperation", "Operation")
                        .WithMany("Channels")
                        .HasForeignKey("LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogSetOperation", b =>
                {
                    b.HasOne("UnverifyService.Core.Entity.Logs.UnverifyLogItem", "LogItem")
                        .WithOne("SetOperation")
                        .HasForeignKey("UnverifyService.Core.Entity.Logs.UnverifyLogSetOperation", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogSetRole", b =>
                {
                    b.HasOne("UnverifyService.Core.Entity.Logs.UnverifyLogSetOperation", "Operation")
                        .WithMany("Roles")
                        .HasForeignKey("LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogUpdateOperation", b =>
                {
                    b.HasOne("UnverifyService.Core.Entity.Logs.UnverifyLogItem", "LogItem")
                        .WithOne("UpdateOperation")
                        .HasForeignKey("UnverifyService.Core.Entity.Logs.UnverifyLogUpdateOperation", "LogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogItem");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogItem", b =>
                {
                    b.Navigation("RemoveOperation");

                    b.Navigation("SetOperation");

                    b.Navigation("UpdateOperation");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogRemoveOperation", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("UnverifyService.Core.Entity.Logs.UnverifyLogSetOperation", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
